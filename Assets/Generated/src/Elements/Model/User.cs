/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.1.0-SNAPSHOT - 50c43394a8fba7f7778a8f9dd84eae40d370b7bc - 2025-04-18 16:50:54
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// The User associated with this Profile.
    /// </summary>
    [DataContract(Name = "User")]
    public partial class User
    {
        /// <summary>
        /// The user&#39;s access level.
        /// </summary>
        /// <value>The user&#39;s access level.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LevelEnum
        {
            /// <summary>
            /// Enum UNPRIVILEGED for value: UNPRIVILEGED
            /// </summary>
            [EnumMember(Value = "UNPRIVILEGED")]
            UNPRIVILEGED = 1,

            /// <summary>
            /// Enum USER for value: USER
            /// </summary>
            [EnumMember(Value = "USER")]
            USER = 2,

            /// <summary>
            /// Enum SUPERUSER for value: SUPERUSER
            /// </summary>
            [EnumMember(Value = "SUPERUSER")]
            SUPERUSER = 3
        }


        /// <summary>
        /// The user&#39;s access level.
        /// </summary>
        /// <value>The user&#39;s access level.</value>
        [DataMember(Name = "level", IsRequired = true, EmitDefaultValue = true)]
        public LevelEnum Level { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="User" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected User() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="User" /> class.
        /// </summary>
        /// <param name="id">The user&#39;s database assigned unique ID. (required).</param>
        /// <param name="name">A unique name for the user..</param>
        /// <param name="firstName">The user&#39;s first name.</param>
        /// <param name="lastName">The user&#39;s last name.</param>
        /// <param name="email">The user&#39;s email..</param>
        /// <param name="primaryPhoneNb">The user&#39;s phone number..</param>
        /// <param name="level">The user&#39;s access level. (required).</param>
        public User(string id = default(string), string name = default(string), string firstName = default(string), string lastName = default(string), string email = default(string), string primaryPhoneNb = default(string), LevelEnum level = default(LevelEnum))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for User and cannot be null");
            }
            this.Id = id;
            this.Level = level;
            this.Name = name;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.Email = email;
            this.PrimaryPhoneNb = primaryPhoneNb;
        }

        /// <summary>
        /// The user&#39;s database assigned unique ID.
        /// </summary>
        /// <value>The user&#39;s database assigned unique ID.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// A unique name for the user.
        /// </summary>
        /// <value>A unique name for the user.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The user&#39;s first name
        /// </summary>
        /// <value>The user&#39;s first name</value>
        [DataMember(Name = "firstName", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// The user&#39;s last name
        /// </summary>
        /// <value>The user&#39;s last name</value>
        [DataMember(Name = "lastName", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// The user&#39;s email.
        /// </summary>
        /// <value>The user&#39;s email.</value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// The user&#39;s phone number.
        /// </summary>
        /// <value>The user&#39;s phone number.</value>
        [DataMember(Name = "primaryPhoneNb", EmitDefaultValue = false)]
        public string PrimaryPhoneNb { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class User {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  PrimaryPhoneNb: ").Append(PrimaryPhoneNb).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
