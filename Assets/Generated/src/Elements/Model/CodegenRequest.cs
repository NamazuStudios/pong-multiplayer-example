/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.1.0-SNAPSHOT - 50c43394a8fba7f7778a8f9dd84eae40d370b7bc - 2025-04-18 16:50:54
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// CodegenRequest
    /// </summary>
    [DataContract(Name = "CodegenRequest")]
    public partial class CodegenRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CodegenRequest" /> class.
        /// </summary>
        /// <param name="applicationNameOrId">The application name or id that you want to generate API code for. If left null or empty, the Elements core API will be generated instead..</param>
        /// <param name="language">The target language that you want to generate the code to..</param>
        /// <param name="packageName">The package name to set the generated code to. E.g. com.mycompany.mygame.Elements.</param>
        /// <param name="options">Any additional options that you want to pass to the generator.</param>
        public CodegenRequest(string applicationNameOrId = default(string), string language = default(string), string packageName = default(string), string options = default(string))
        {
            this.ApplicationNameOrId = applicationNameOrId;
            this.Language = language;
            this.PackageName = packageName;
            this.Options = options;
        }

        /// <summary>
        /// The application name or id that you want to generate API code for. If left null or empty, the Elements core API will be generated instead.
        /// </summary>
        /// <value>The application name or id that you want to generate API code for. If left null or empty, the Elements core API will be generated instead.</value>
        [DataMember(Name = "applicationNameOrId", EmitDefaultValue = false)]
        public string ApplicationNameOrId { get; set; }

        /// <summary>
        /// The target language that you want to generate the code to.
        /// </summary>
        /// <value>The target language that you want to generate the code to.</value>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public string Language { get; set; }

        /// <summary>
        /// The package name to set the generated code to. E.g. com.mycompany.mygame.Elements
        /// </summary>
        /// <value>The package name to set the generated code to. E.g. com.mycompany.mygame.Elements</value>
        [DataMember(Name = "packageName", EmitDefaultValue = false)]
        public string PackageName { get; set; }

        /// <summary>
        /// Any additional options that you want to pass to the generator
        /// </summary>
        /// <value>Any additional options that you want to pass to the generator</value>
        [DataMember(Name = "options", EmitDefaultValue = false)]
        public string Options { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CodegenRequest {\n");
            sb.Append("  ApplicationNameOrId: ").Append(ApplicationNameOrId).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  PackageName: ").Append(PackageName).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
