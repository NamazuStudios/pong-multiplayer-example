/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.1.0-SNAPSHOT - 50c43394a8fba7f7778a8f9dd84eae40d370b7bc - 2025-04-18 16:50:54
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// Defines a script method and a module to invoke.
    /// </summary>
    [DataContract(Name = "CallbackDefinition")]
    public partial class CallbackDefinition
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CallbackDefinition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallbackDefinition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CallbackDefinition" /> class.
        /// </summary>
        /// <param name="module">Specifies the module to invoke. (required).</param>
        /// <param name="method">Specifies the method to invoke. (required).</param>
        public CallbackDefinition(string module = default(string), string method = default(string))
        {
            // to ensure "module" is required (not null)
            if (module == null)
            {
                throw new ArgumentNullException("module is a required property for CallbackDefinition and cannot be null");
            }
            this.Module = module;
            // to ensure "method" is required (not null)
            if (method == null)
            {
                throw new ArgumentNullException("method is a required property for CallbackDefinition and cannot be null");
            }
            this.Method = method;
        }

        /// <summary>
        /// Specifies the module to invoke.
        /// </summary>
        /// <value>Specifies the module to invoke.</value>
        [DataMember(Name = "module", IsRequired = true, EmitDefaultValue = true)]
        public string Module { get; set; }

        /// <summary>
        /// Specifies the method to invoke.
        /// </summary>
        /// <value>Specifies the method to invoke.</value>
        [DataMember(Name = "method", IsRequired = true, EmitDefaultValue = true)]
        public string Method { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CallbackDefinition {\n");
            sb.Append("  Module: ").Append(Module).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
