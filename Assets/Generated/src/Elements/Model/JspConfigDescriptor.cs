/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.1.0-SNAPSHOT - 50c43394a8fba7f7778a8f9dd84eae40d370b7bc - 2025-04-18 16:50:54
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// JspConfigDescriptor
    /// </summary>
    [DataContract(Name = "JspConfigDescriptor")]
    public partial class JspConfigDescriptor
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JspConfigDescriptor" /> class.
        /// </summary>
        /// <param name="taglibs">taglibs.</param>
        /// <param name="jspPropertyGroups">jspPropertyGroups.</param>
        public JspConfigDescriptor(List<TaglibDescriptor> taglibs = default(List<TaglibDescriptor>), List<JspPropertyGroupDescriptor> jspPropertyGroups = default(List<JspPropertyGroupDescriptor>))
        {
            this.Taglibs = taglibs;
            this.JspPropertyGroups = jspPropertyGroups;
        }

        /// <summary>
        /// Gets or Sets Taglibs
        /// </summary>
        [DataMember(Name = "taglibs", EmitDefaultValue = false)]
        public List<TaglibDescriptor> Taglibs { get; set; }

        /// <summary>
        /// Gets or Sets JspPropertyGroups
        /// </summary>
        [DataMember(Name = "jspPropertyGroups", EmitDefaultValue = false)]
        public List<JspPropertyGroupDescriptor> JspPropertyGroups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JspConfigDescriptor {\n");
            sb.Append("  Taglibs: ").Append(Taglibs).Append("\n");
            sb.Append("  JspPropertyGroups: ").Append(JspPropertyGroups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
