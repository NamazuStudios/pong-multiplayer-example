/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.1.0-SNAPSHOT - 50c43394a8fba7f7778a8f9dd84eae40d370b7bc - 2025-04-18 16:50:54
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// UpdateLargeObjectRequest
    /// </summary>
    [DataContract(Name = "UpdateLargeObjectRequest")]
    public partial class UpdateLargeObjectRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateLargeObjectRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateLargeObjectRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateLargeObjectRequest" /> class.
        /// </summary>
        /// <param name="mimeType">The MIME type associated with the object. (required).</param>
        /// <param name="read">read (required).</param>
        /// <param name="write">write (required).</param>
        /// <param name="delete">delete (required).</param>
        public UpdateLargeObjectRequest(string mimeType = default(string), SubjectRequest read = default(SubjectRequest), SubjectRequest write = default(SubjectRequest), SubjectRequest delete = default(SubjectRequest))
        {
            // to ensure "mimeType" is required (not null)
            if (mimeType == null)
            {
                throw new ArgumentNullException("mimeType is a required property for UpdateLargeObjectRequest and cannot be null");
            }
            this.MimeType = mimeType;
            // to ensure "read" is required (not null)
            if (read == null)
            {
                throw new ArgumentNullException("read is a required property for UpdateLargeObjectRequest and cannot be null");
            }
            this.Read = read;
            // to ensure "write" is required (not null)
            if (write == null)
            {
                throw new ArgumentNullException("write is a required property for UpdateLargeObjectRequest and cannot be null");
            }
            this.Write = write;
            // to ensure "delete" is required (not null)
            if (delete == null)
            {
                throw new ArgumentNullException("delete is a required property for UpdateLargeObjectRequest and cannot be null");
            }
            this.Delete = delete;
        }

        /// <summary>
        /// The MIME type associated with the object.
        /// </summary>
        /// <value>The MIME type associated with the object.</value>
        [DataMember(Name = "mimeType", IsRequired = true, EmitDefaultValue = true)]
        public string MimeType { get; set; }

        /// <summary>
        /// Gets or Sets Read
        /// </summary>
        [DataMember(Name = "read", IsRequired = true, EmitDefaultValue = true)]
        public SubjectRequest Read { get; set; }

        /// <summary>
        /// Gets or Sets Write
        /// </summary>
        [DataMember(Name = "write", IsRequired = true, EmitDefaultValue = true)]
        public SubjectRequest Write { get; set; }

        /// <summary>
        /// Gets or Sets Delete
        /// </summary>
        [DataMember(Name = "delete", IsRequired = true, EmitDefaultValue = true)]
        public SubjectRequest Delete { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateLargeObjectRequest {\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("  Read: ").Append(Read).Append("\n");
            sb.Append("  Write: ").Append(Write).Append("\n");
            sb.Append("  Delete: ").Append(Delete).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
