/*
 * ECI Elements
 *
 * ECI Elements Core APIs
 *
 * The version of the OpenAPI document: 3.1.0-SNAPSHOT - 50c43394a8fba7f7778a8f9dd84eae40d370b7bc - 2025-04-18 16:50:54
 * Contact: info@namazustudios.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Elements.Client.OpenAPIDateConverter;

namespace Elements.Model
{
    /// <summary>
    /// This configures the matchmaking system.  More specifically, this configures which scripts andmethods will be called when a successful match has been made.
    /// </summary>
    [DataContract(Name = "MatchmakingApplicationConfiguration")]
    public partial class MatchmakingApplicationConfiguration
    {
        /// <summary>
        /// The category for the application configuration.
        /// </summary>
        /// <value>The category for the application configuration.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CategoryEnum
        {
            /// <summary>
            /// Enum MATCHMAKING for value: MATCHMAKING
            /// </summary>
            [EnumMember(Value = "MATCHMAKING")]
            MATCHMAKING = 1,

            /// <summary>
            /// Enum PSNPS4 for value: PSN_PS4
            /// </summary>
            [EnumMember(Value = "PSN_PS4")]
            PSNPS4 = 2,

            /// <summary>
            /// Enum PSNVITA for value: PSN_VITA
            /// </summary>
            [EnumMember(Value = "PSN_VITA")]
            PSNVITA = 3,

            /// <summary>
            /// Enum IOSAPPSTORE for value: IOS_APP_STORE
            /// </summary>
            [EnumMember(Value = "IOS_APP_STORE")]
            IOSAPPSTORE = 4,

            /// <summary>
            /// Enum ANDROIDGOOGLEPLAY for value: ANDROID_GOOGLE_PLAY
            /// </summary>
            [EnumMember(Value = "ANDROID_GOOGLE_PLAY")]
            ANDROIDGOOGLEPLAY = 5,

            /// <summary>
            /// Enum FACEBOOK for value: FACEBOOK
            /// </summary>
            [EnumMember(Value = "FACEBOOK")]
            FACEBOOK = 6,

            /// <summary>
            /// Enum FIREBASE for value: FIREBASE
            /// </summary>
            [EnumMember(Value = "FIREBASE")]
            FIREBASE = 7
        }


        /// <summary>
        /// The category for the application configuration.
        /// </summary>
        /// <value>The category for the application configuration.</value>
        [DataMember(Name = "category", IsRequired = true, EmitDefaultValue = true)]
        public CategoryEnum Category { get; set; }
        /// <summary>
        /// Specifies the matching algorithm to use.  Algorithms are builtin and implemented by the API services.  Currently, only FIFO is supported.
        /// </summary>
        /// <value>Specifies the matching algorithm to use.  Algorithms are builtin and implemented by the API services.  Currently, only FIFO is supported.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AlgorithmEnum
        {
            /// <summary>
            /// Enum FIFO for value: FIFO
            /// </summary>
            [EnumMember(Value = "FIFO")]
            FIFO = 1
        }


        /// <summary>
        /// Specifies the matching algorithm to use.  Algorithms are builtin and implemented by the API services.  Currently, only FIFO is supported.
        /// </summary>
        /// <value>Specifies the matching algorithm to use.  Algorithms are builtin and implemented by the API services.  Currently, only FIFO is supported.</value>
        [DataMember(Name = "algorithm", IsRequired = true, EmitDefaultValue = true)]
        public AlgorithmEnum Algorithm { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchmakingApplicationConfiguration" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MatchmakingApplicationConfiguration() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchmakingApplicationConfiguration" /> class.
        /// </summary>
        /// <param name="id">The database assigned ID for the application configuration..</param>
        /// <param name="category">The category for the application configuration. (required).</param>
        /// <param name="uniqueIdentifier">The application-configuration specific unique ID.  (Varies by ConfigurationCategory).</param>
        /// <param name="parent">parent (required).</param>
        /// <param name="productBundles">The list of product bundles that may be rewarded upon successful IAP transactions..</param>
        /// <param name="scheme">A user-specified unique identifier for the matching scheme.  It is possible to specify multiple schemes per application, but each must be uniquely named.  Each scheme allows for the specification of different scripts to handle the successful match.  When requesting matchmaking services clients will specify the scheme to be used. (required).</param>
        /// <param name="algorithm">Specifies the matching algorithm to use.  Algorithms are builtin and implemented by the API services.  Currently, only FIFO is supported. (required).</param>
        /// <param name="success">success (required).</param>
        public MatchmakingApplicationConfiguration(string id = default(string), CategoryEnum category = default(CategoryEnum), string uniqueIdentifier = default(string), Application parent = default(Application), List<ProductBundle> productBundles = default(List<ProductBundle>), string scheme = default(string), AlgorithmEnum algorithm = default(AlgorithmEnum), CallbackDefinition success = default(CallbackDefinition))
        {
            this.Category = category;
            // to ensure "parent" is required (not null)
            if (parent == null)
            {
                throw new ArgumentNullException("parent is a required property for MatchmakingApplicationConfiguration and cannot be null");
            }
            this.Parent = parent;
            // to ensure "scheme" is required (not null)
            if (scheme == null)
            {
                throw new ArgumentNullException("scheme is a required property for MatchmakingApplicationConfiguration and cannot be null");
            }
            this.Scheme = scheme;
            this.Algorithm = algorithm;
            // to ensure "success" is required (not null)
            if (success == null)
            {
                throw new ArgumentNullException("success is a required property for MatchmakingApplicationConfiguration and cannot be null");
            }
            this.Success = success;
            this.Id = id;
            this.UniqueIdentifier = uniqueIdentifier;
            this.ProductBundles = productBundles;
        }

        /// <summary>
        /// The database assigned ID for the application configuration.
        /// </summary>
        /// <value>The database assigned ID for the application configuration.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The application-configuration specific unique ID.  (Varies by ConfigurationCategory)
        /// </summary>
        /// <value>The application-configuration specific unique ID.  (Varies by ConfigurationCategory)</value>
        [DataMember(Name = "uniqueIdentifier", EmitDefaultValue = false)]
        public string UniqueIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name = "parent", IsRequired = true, EmitDefaultValue = true)]
        public Application Parent { get; set; }

        /// <summary>
        /// The list of product bundles that may be rewarded upon successful IAP transactions.
        /// </summary>
        /// <value>The list of product bundles that may be rewarded upon successful IAP transactions.</value>
        [DataMember(Name = "productBundles", EmitDefaultValue = false)]
        public List<ProductBundle> ProductBundles { get; set; }

        /// <summary>
        /// A user-specified unique identifier for the matching scheme.  It is possible to specify multiple schemes per application, but each must be uniquely named.  Each scheme allows for the specification of different scripts to handle the successful match.  When requesting matchmaking services clients will specify the scheme to be used.
        /// </summary>
        /// <value>A user-specified unique identifier for the matching scheme.  It is possible to specify multiple schemes per application, but each must be uniquely named.  Each scheme allows for the specification of different scripts to handle the successful match.  When requesting matchmaking services clients will specify the scheme to be used.</value>
        [DataMember(Name = "scheme", IsRequired = true, EmitDefaultValue = true)]
        public string Scheme { get; set; }

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [DataMember(Name = "success", IsRequired = true, EmitDefaultValue = true)]
        public CallbackDefinition Success { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MatchmakingApplicationConfiguration {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  UniqueIdentifier: ").Append(UniqueIdentifier).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  ProductBundles: ").Append(ProductBundles).Append("\n");
            sb.Append("  Scheme: ").Append(Scheme).Append("\n");
            sb.Append("  Algorithm: ").Append(Algorithm).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
